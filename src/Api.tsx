/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";
export const SPEC_VERSION = "1.0.0"; 
export type ProfileType = "stakeholder" | "admin" | "user";

export type RecordStatus = "active" | "inactive";

export interface AuthProfile {
  remarks?: string;
  scopes?: string;
  status: RecordStatus;
  type: ProfileType;
  mobileNumber?: string;
  email: string;
  username: string;
  name: string;
  id: number;
}

export interface AuthResult {
  token: string;
  profile: AuthProfile;
}

export interface FieldError {
  value: string | null;
  field: string | null;
  type: string | null;
  message: string;
}

export interface EntityError {
  name: string;
  message: string;
  stack?: string;
  status: number;
  fieldErrors?: FieldError[];
}

export interface RegisterProfile {
  mobileNumber?: string;
  email: string;
  password: string;
  username: string;
  name: string;
}

export interface ApiError {
  name: string;
  message: string;
  stack?: string;
  status: number;
}

export interface UpdateProfile {
  remarks?: string | null;
  scopes?: string;
  status: RecordStatus;
  type: ProfileType;
  mobileNumber?: string;
  email: string;
  name: string;
}

export interface ProjectAttr {
  id?: number;
  name: string;
  code: string;
  location: string;
  estimatedCost: number;
  remarks?: string;
  status: RecordStatus;
}

export type AuthProps = Omit<MutateProps<AuthResult, unknown, void, void, void>, "path" | "verb">;

export const Auth = (props: AuthProps) => (
  <Mutate<AuthResult, unknown, void, void, void>
    verb="POST"
    path={`/api/auth`}
    
    {...props}
  />
);

export type UseAuthProps = Omit<UseMutateProps<AuthResult, unknown, void, void, void>, "path" | "verb">;

export const useAuth = (props: UseAuthProps) => useMutate<AuthResult, unknown, void, void, void>("POST", `/api/auth`, props);


export interface GetAllProfilesQueryParams {
  search?: string;
}

export type GetAllProfilesProps = Omit<GetProps<AuthProfile[], unknown, GetAllProfilesQueryParams, void>, "path">;

export const GetAllProfiles = (props: GetAllProfilesProps) => (
  <Get<AuthProfile[], unknown, GetAllProfilesQueryParams, void>
    path={`/api/profile/getAll`}
    
    {...props}
  />
);

export type UseGetAllProfilesProps = Omit<UseGetProps<AuthProfile[], unknown, GetAllProfilesQueryParams, void>, "path">;

export const useGetAllProfiles = (props: UseGetAllProfilesProps) => useGet<AuthProfile[], unknown, GetAllProfilesQueryParams, void>(`/api/profile/getAll`, props);


export type RegisterProps = Omit<MutateProps<AuthResult, EntityError, void, RegisterProfile, void>, "path" | "verb">;

export const Register = (props: RegisterProps) => (
  <Mutate<AuthResult, EntityError, void, RegisterProfile, void>
    verb="POST"
    path={`/api/profile/register`}
    
    {...props}
  />
);

export type UseRegisterProps = Omit<UseMutateProps<AuthResult, EntityError, void, RegisterProfile, void>, "path" | "verb">;

export const useRegister = (props: UseRegisterProps) => useMutate<AuthResult, EntityError, void, RegisterProfile, void>("POST", `/api/profile/register`, props);


export type MeProps = Omit<GetProps<AuthProfile, unknown, void, void>, "path">;

export const Me = (props: MeProps) => (
  <Get<AuthProfile, unknown, void, void>
    path={`/api/profile/me`}
    
    {...props}
  />
);

export type UseMeProps = Omit<UseGetProps<AuthProfile, unknown, void, void>, "path">;

export const useMe = (props: UseMeProps) => useGet<AuthProfile, unknown, void, void>(`/api/profile/me`, props);


export interface UpdateProfileStatusQueryParams {
  status: RecordStatus;
}

export interface UpdateProfileStatusPathParams {
  id: number
}

export type UpdateProfileStatusProps = Omit<MutateProps<void, unknown, UpdateProfileStatusQueryParams, void, UpdateProfileStatusPathParams>, "path" | "verb"> & UpdateProfileStatusPathParams;

export const UpdateProfileStatus = ({id, ...props}: UpdateProfileStatusProps) => (
  <Mutate<void, unknown, UpdateProfileStatusQueryParams, void, UpdateProfileStatusPathParams>
    verb="PATCH"
    path={`/api/profile/updateProfileStatus/${id}`}
    
    {...props}
  />
);

export type UseUpdateProfileStatusProps = Omit<UseMutateProps<void, unknown, UpdateProfileStatusQueryParams, void, UpdateProfileStatusPathParams>, "path" | "verb"> & UpdateProfileStatusPathParams;

export const useUpdateProfileStatus = ({id, ...props}: UseUpdateProfileStatusProps) => useMutate<void, unknown, UpdateProfileStatusQueryParams, void, UpdateProfileStatusPathParams>("PATCH", (paramsInPath: UpdateProfileStatusPathParams) => `/api/profile/updateProfileStatus/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface UpdateProfilePathParams {
  id: number
}

export type UpdateProfileProps = Omit<MutateProps<AuthProfile, EntityError | ApiError, void, UpdateProfile, UpdateProfilePathParams>, "path" | "verb"> & UpdateProfilePathParams;

export const UpdateProfile = ({id, ...props}: UpdateProfileProps) => (
  <Mutate<AuthProfile, EntityError | ApiError, void, UpdateProfile, UpdateProfilePathParams>
    verb="PATCH"
    path={`/api/profile/updateProfile/${id}`}
    
    {...props}
  />
);

export type UseUpdateProfileProps = Omit<UseMutateProps<AuthProfile, EntityError | ApiError, void, UpdateProfile, UpdateProfilePathParams>, "path" | "verb"> & UpdateProfilePathParams;

export const useUpdateProfile = ({id, ...props}: UseUpdateProfileProps) => useMutate<AuthProfile, EntityError | ApiError, void, UpdateProfile, UpdateProfilePathParams>("PATCH", (paramsInPath: UpdateProfilePathParams) => `/api/profile/updateProfile/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface ChangePasswordPathParams {
  id: number
}

export interface ChangePasswordRequestBody {
  newPassword: string;
  currentPassword: string;
}

export type ChangePasswordProps = Omit<MutateProps<void, unknown, void, ChangePasswordRequestBody, ChangePasswordPathParams>, "path" | "verb"> & ChangePasswordPathParams;

export const ChangePassword = ({id, ...props}: ChangePasswordProps) => (
  <Mutate<void, unknown, void, ChangePasswordRequestBody, ChangePasswordPathParams>
    verb="PATCH"
    path={`/api/profile/changePassword/${id}`}
    
    {...props}
  />
);

export type UseChangePasswordProps = Omit<UseMutateProps<void, unknown, void, ChangePasswordRequestBody, ChangePasswordPathParams>, "path" | "verb"> & ChangePasswordPathParams;

export const useChangePassword = ({id, ...props}: UseChangePasswordProps) => useMutate<void, unknown, void, ChangePasswordRequestBody, ChangePasswordPathParams>("PATCH", (paramsInPath: ChangePasswordPathParams) => `/api/profile/changePassword/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface ResetPasswordRequestBody {
  email: string;
  username: string;
}

export type ResetPasswordProps = Omit<MutateProps<void, unknown, void, ResetPasswordRequestBody, void>, "path" | "verb">;

export const ResetPassword = (props: ResetPasswordProps) => (
  <Mutate<void, unknown, void, ResetPasswordRequestBody, void>
    verb="POST"
    path={`/api/profile/resetPassword`}
    
    {...props}
  />
);

export type UseResetPasswordProps = Omit<UseMutateProps<void, unknown, void, ResetPasswordRequestBody, void>, "path" | "verb">;

export const useResetPassword = (props: UseResetPasswordProps) => useMutate<void, unknown, void, ResetPasswordRequestBody, void>("POST", `/api/profile/resetPassword`, props);


export interface GetAllProjectsQueryParams {
  search?: string;
}

export type GetAllProjectsProps = Omit<GetProps<ProjectAttr[], unknown, GetAllProjectsQueryParams, void>, "path">;

export const GetAllProjects = (props: GetAllProjectsProps) => (
  <Get<ProjectAttr[], unknown, GetAllProjectsQueryParams, void>
    path={`/api/project/getAll`}
    
    {...props}
  />
);

export type UseGetAllProjectsProps = Omit<UseGetProps<ProjectAttr[], unknown, GetAllProjectsQueryParams, void>, "path">;

export const useGetAllProjects = (props: UseGetAllProjectsProps) => useGet<ProjectAttr[], unknown, GetAllProjectsQueryParams, void>(`/api/project/getAll`, props);


export type CreateProjectProps = Omit<MutateProps<ProjectAttr, EntityError, void, ProjectAttr, void>, "path" | "verb">;

export const CreateProject = (props: CreateProjectProps) => (
  <Mutate<ProjectAttr, EntityError, void, ProjectAttr, void>
    verb="POST"
    path={`/api/project/createProject`}
    
    {...props}
  />
);

export type UseCreateProjectProps = Omit<UseMutateProps<ProjectAttr, EntityError, void, ProjectAttr, void>, "path" | "verb">;

export const useCreateProject = (props: UseCreateProjectProps) => useMutate<ProjectAttr, EntityError, void, ProjectAttr, void>("POST", `/api/project/createProject`, props);


export interface UpdateProjectPathParams {
  id: number
}

export type UpdateProjectProps = Omit<MutateProps<ProjectAttr, EntityError | ApiError, void, ProjectAttr, UpdateProjectPathParams>, "path" | "verb"> & UpdateProjectPathParams;

export const UpdateProject = ({id, ...props}: UpdateProjectProps) => (
  <Mutate<ProjectAttr, EntityError | ApiError, void, ProjectAttr, UpdateProjectPathParams>
    verb="PATCH"
    path={`/api/project/updateProject/${id}`}
    
    {...props}
  />
);

export type UseUpdateProjectProps = Omit<UseMutateProps<ProjectAttr, EntityError | ApiError, void, ProjectAttr, UpdateProjectPathParams>, "path" | "verb"> & UpdateProjectPathParams;

export const useUpdateProject = ({id, ...props}: UseUpdateProjectProps) => useMutate<ProjectAttr, EntityError | ApiError, void, ProjectAttr, UpdateProjectPathParams>("PATCH", (paramsInPath: UpdateProjectPathParams) => `/api/project/updateProject/${paramsInPath.id}`, {  pathParams: { id }, ...props });

